<?php namespace Accss;
use ProcessWire\Fieldtype;
use ProcessWire\Page;
use ProcessWire\Field;
use function ProcessWire\wire;
use function ProcessWire\__;


class FieldtypeSecret extends Fieldtype
{

    public static function getModuleInfo() {
		return array(
			'title' => 'Secret',
			'version' => 100,
			'summary' => 'Field that stores a hashed and salted secret',
			'installs' => array('InputfieldSecret'),
		);
	}

    /**
     * Generate a 16-byte initialization vector (IV) for AES-256-CBC
     *
     * @return string 16-byte IV
     */
    public static function generateIv() {
        return openssl_random_pseudo_bytes(16); // 16 bytes = 128 bits for AES-256-CBC
    }

    /**
     * Encrypt a value with a given IV
     *
     * @param string $plaintext The secret value to encrypt
     * @param ProcessWire\Config $config ProcessWire's configuration object to get the tableSalt
     * @param string $iv A 16-byte initialization vector (IV)
     * @return string Encrypted value (without IV)
     */
    public static function encryptValue(string $plaintext, string $iv, bool $appendIv = false):string {
        // Derive encryption key from tableSalt
        $config = wire('config');
        $key = hash('sha256', $config->tableSalt);

        // Encrypt the data using AES-256-CBC
        $encrypted = openssl_encrypt($plaintext, 'aes-256-cbc', $key, 0, $iv);

		if ($appendIv)
		{
			// Return the encrypted data along with IV, base64-encoded
			return base64_encode($encrypted . '::' . $iv);
		}
        // Return only the encrypted data, without the IV
        return base64_encode($encrypted);
    }

    /**
     * Decrypt the encrypted value using the given IV
     *
     * @param string $encrypted The encrypted string (base64-encoded)
     * @param ProcessWire\Config $config ProcessWire's configuration object
     * @param string $iv A 16-byte initialization vector (IV) used during encryption
     * @return string The decrypted value (plaintext)
     */
    public static function decryptValue($encrypted, $iv) {
        // Derive encryption key from tableSalt
        $config = wire('config');
        $key = hash('sha256', $config->tableSalt);

        // Decode the encrypted data from base64
        $encryptedData = base64_decode($encrypted);

        // Decrypt the data using AES-256-CBC and return the plaintext
        return openssl_decrypt($encryptedData, 'aes-256-cbc', $key, 0, $iv);
    }
		/**
	 * Decrypt the encrypted value when you need to use it. This function assumes that the IV is embedded into the string
	 *
	 * @param string $encrypted The encrypted string stored in the database
	 * @param ProcessWire\Config $config ProcessWire's configuration object
	 * @return string The decrypted value (plaintext)
	 */
	public static function decryptValueWithIV($encrypted) {
		$config = wire('config');
		
		$key = hash('sha256', $config->tableSalt);
		list($encryptedData, $iv) = explode('::', base64_decode($encrypted), 2);

		// Decrypt the data using AES-256-CBC
		return openssl_decrypt($encryptedData, 'aes-256-cbc', $key, 0, $iv);
	}

	public static function getEncryptedRawValue(string $plaintext)
	{
		if (empty($plaintext))
			return '';
		$iv = self::generateIv();
		return self::encryptValue($plaintext,$iv,true);
	}

    /**
	 * Return the associated Inputfield
	 * 
	 * @param Page $page
	 * @param Field $field
	 * @return InputfieldSecret
	 *
	 */
	public function getInputfield(Page $page, Field $field) {
		/** @var InputfieldSecret $inputfield */
		$inputfield = $this->modules->get('InputfieldSecret'); 
		
		return $inputfield; 
	}
    /**
	 * Return all Fieldtypes derived from FieldtypeText, which we will consider compatible
	 * 
	 * @param Field $field
	 * @return null|array
	 *
	 */
	public function ___getCompatibleFieldtypes(Field $field) {
		return null;
	}

    public function getBlankValue(Page $page, Field $field)
    {
        return '';
    }

    /**
	 * Sanitize value for runtime
	 * 
	 * @param Page $page
	 * @param Field $field
	 * @param string $value
	 * @return string
	 *
	 */
	public function sanitizeValue(Page $page, Field $field, $value) {

        /* $item = $page->__isset($field->name) ? $page->get($field->name) : $this->getBlankValue($page, $field); 
		$item->pass = trim($value); 

		if($item->isChanged()) $page->trackChange($field->name); 

		return $item; */
		
        return $value;
	}

    /**
	 * Given a raw value (value as stored in DB), return the value as it would appear in a Page object
	 *
	 * @param Page $page
	 * @param Field $field
	 * @param array $value
	 * @return string
	 *
	 */
	public function ___wakeupValue(Page $page, Field $field, $value) {
		
		if (empty($value)){
            return '';
        }
        

		$dec = self::decryptValue($value['data'],$value['iv']);
        return $dec;
	}

    /**
	 * Given an 'awake' value, as set by wakeupValue, convert the value back to a basic type for storage in DB. 
	 *              
	 * @param Page $page
	 * @param Field $field
	 * @param string|int|array|object $value
	 * @return array|string|int
	 *
	 */
    public function ___sleepValue(Page $page, Field $field, $value) {
		
        //if (empty($value))
            //return array('data'=> $enc,'iv'=> $iv);

		$iv = self::generateIv();
        $enc = self::encryptValue($value,$iv);

        return array('data'=> $enc,'iv'=> $iv);
	}

    /**
	 * Return the database schema in specified format
	 * 
	 * @param Field $field
	 * @return array
	 *
	 */
	public function getDatabaseSchema(Field $field) {
		$schema = parent::getDatabaseSchema($field); 
        $schema['iv'] = 'CHAR(24) NOT NULL';
		$schema['data'] = 'VARCHAR(255) NOT NULL';
		$engine = $this->wire()->config->dbEngine;
		$schema['xtra']['append'] = "ENGINE=$engine DEFAULT CHARSET=ascii";
		return $schema;
	}

    /**
	 * Return the fields required to configure an instance of FieldtypePassword
	 * 
	 * @param Field $field
	 * @return InputfieldWrapper
	 *
	 */
	public function ___getConfigInputfields(Field $field) {
		$inputfields = parent::___getConfigInputfields($field);
		return $inputfields; 
	}
}