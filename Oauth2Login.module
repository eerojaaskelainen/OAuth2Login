<?php namespace ProcessWire;
require __DIR__ . '/vendor/autoload.php';

class Oauth2Login extends WireData implements Module, ConfigurableModule {

    const minVersion = "3.0.0";

    protected $data;
    public static $_data;
    protected static $configFile;
    protected static $validConfigKeys = array(
        'providerClassName',
        'className',
        'packageName',
        'keysUrl',
        'options'
    );
    protected $backendUrl;
    protected $provider;
    protected $providerParams;


    public static function getModuleInfo()
    {
        return [
            'title' => 'OAuth2Login',
            'version' => "1.0.4",
            'summary' => 'OAuth2 login for ProcessWire.',
            'author' => 'flydev, Eero Jääskeläinen',
            'href' => 'https://modules.processwire.com/modules/oauth2-login/',
            'singular' => true,
            'autoload' => 'template=admin',
            'icon' => 'plug',
        ];
    }

    protected function save() {
        $this->modules->saveModuleConfigData($this, $this->data);
    }

    protected static function getDefaultData()
    {
        return array(
            'providers_config'  => ''
        );
    }

    
    protected function addAdditionalUserFields():void
    {
        $userTemplate = $this->templates->get('user');
        if ($userTemplate == null){
            $this->warning($this->_('Could not get user template!'));
            return;
        }
        // UID field:
        if (!$userTemplate->hasField('oauth_uid'))
        {
            $field = $this->fields->get('oauth_uid');
            if ($field == null){
                $field = $this->fields->makeItem(['type'=>'Text','name'=>'oauth_uid','label'=>$this->_('UID (OAuth)')]);
                $field->save();
            }
            $userTemplate->fields->add($field);
            $userTemplate->fields->save();
        }

    }
    protected function removeAdditionalUserFields(bool $removeAddedUsers = false):void
    {
        $userTemplate = $this->templates->get('user');
        if ($userTemplate == null){
            $this->warning($this->_('Could not get user template!'));
            return;
        }
        // UID field:
        if (!$userTemplate->hasField('oauth_uid'))
            return;
        
        if ($removeAddedUsers)
        {
            $usersToRem = $this->users->find('oauth_uid!=\'\'');
            foreach ($usersToRem as $usr)
            {
                $this->users->delete($usr);
            }
        }

    }
    public function ___install() {

        if(version_compare($this->config->version, self::minVersion, '<'))
            throw new WireException("This module requires ProcessWire " . self::minVersion . " or newer.");

        $this->save();
        
        $this->addAdditionalUserFields();
    }

    public function ___uninstall() {
        $this->removeAdditionalUserFields(false);
    }

    public function __construct() {

        $this->provider = null;

        foreach(self::getDefaultData() as $key => $value) {
            $this->$key = $value;
        }

        parent::__construct();
    }

    public function init() {
        self::$_data = $this;
        //$this->config->styles->add($this->config->urls->Oauth2Login . 'Oauth2Login.css');
        //$this->config->scripts->add($this->config->urls->Oauth2Login . 'Oauth2Login.js');
		$this->addHookAfter('Page(template.name=admin)::render', $this, 'hookBackend');

        $this->backendUrl = $this->config->urls->httpAdmin;

        $this->processLogin();
    }

    public function getCode($providerName) {

        $input = wire('input');
        $user = wire('user');
        $session = wire('session');

        $token = null;

        if (isset($input->post->{$providerName}) && !$user->isLoggedin()) {

            try {
                $session->CSRF->validate();
            } catch (WireCSRFException $e) {
                $this->log('SessionToken is invalid, possible CSRF attack in progress');
            }

            if (empty($input->get->code)) {
                if (strpos($providerName,'_microsoft')!== false){
                    if ($this->get('microsoft_use_mfa'))
                        $this->providerParams['amr_values']='ngcmfa';
                }
                $authUrl = $this->provider->getAuthorizationUrl($this->providerParams);
                $session->set('oauth2state', $this->provider->getState());
                $session->set('provider', $providerName);
                $session->redirect($authUrl);
            } elseif (empty($input->get->state) || $input->get->state !== $session->get('oauth2state')) {
                $this->log('State is invalid, possible CSRF attack in progress');
                $session->remove('oauth2state');
                $session->remove('provider');
                $session->logout();
            }
        }
        elseif (!$user->isLoggedin() && !empty($input->get->code) && !empty($session->get('oauth2state'))) {

            $token = $this->provider->getAccessToken('authorization_code', [
                'code' => $input->get->code
            ]);
        }

        return $token;
    }

    protected function ___processLogin() {

        $session = wire('session');

        $providerName = $this->getProviderName();
        if(!$this->setProvider($providerName)) return false;

        $token = $this->getCode($providerName);

        if(is_null($token)) return false;

        try {
            $ownerDetails = $this->provider->getResourceOwner($token);
            $user = null;

            if (method_exists($ownerDetails,'getUpn') && ($upn = $ownerDetails->getUpn()))
            {
                if ($upnE = $this->sanitizer->email($upn)){
                    $user = $this->users->get("email=$upn");
                    if (! $user->id)
                        $user = null;
                }
            }
            if ($user == null)
            {
                if(method_exists($ownerDetails, 'getLastName') || method_exists($ownerDetails, 'getFirstName')) {
                    $username = !empty($ownerDetails->getLastName()) ? $ownerDetails->getLastName() : '';
                    $username = !empty($username) && !empty($ownerDetails->getFirstName()) ? $username . '-' : '';
                    $username = !empty($ownerDetails->getFirstName()) ? $username . $ownerDetails->getFirstName() : $username;
                }
                elseif(method_exists($ownerDetails, 'getName')) {
                    $ownerDetails = $this->provider->getResourceOwner($token);
                    $username = $ownerDetails->getName();
                }

                if (empty($username) && method_exists($ownerDetails, 'getNickname')) {
                    $username = $ownerDetails->getNickname();
                }

                $emails = null;
                if(method_exists($ownerDetails, 'getEmail')) {
                    $emails = array($ownerDetails->getEmail());
                }

                elseif(method_exists($ownerDetails, 'getEmails')) {
                    // need to fix that
                    $this->provider->domain = 'https://github.com:emails';
                    $ownerDetails = $this->provider->getResourceOwner($token);
                    $emails = $ownerDetails->getEmails();
                }
                elseif(method_exists($ownerDetails,'getUpn'))
                {
                    $upn = $this->sanitizer->email($ownerDetails->getUpn());
                    if (!empty($upn))
                    $emails = array($upn);
                }
                $user = $this->checkUsername($username, $emails);
            }

            
            if ($user == null)
                $user = $this->registerNewUser($ownerDetails,$username,$emails);

            if($user != null) {
                $loginUser = $session->forceLogin($user);
                if ($loginUser && $loginUser->id) {
                    $this->wire->log("Used {$providerName} to login for user: $loginUser->name");
                    $session->set('forceLogin', true);
                    if(!empty($session->getFor($this, 'success_uri')))
                        $session->redirect($session->getFor($this, 'success_uri'));
                }
            }
        } catch (\Exception $e) {
            $this->wire->log('Something went wrong: ' . $e->getMessage());
            //$session->redirect($config->urls->admin);
            throw new WireException(__("Something went wrong: Please advise the administrator"));
        }
    }

    /*
     *  replace the last occurence of $search by $replace in $subject
     */
    protected function str_lreplace($search, $replace, $subject) {

        return preg_replace('~(.*)' . preg_quote($search, '~') . '~', '$1' . $replace, $subject, 1);
    }

    public function hookBackend(HookEvent $event)
	{
		if (!wire('user')->isLoggedin()) {
			$this->setRedirectUri($this->backendUrl);
			$this->setRedirectSuccessUri($this->backendUrl);
			$form = $this->render();
			$event->return = $this->replaceForm($event->return, '</form>', $form);
		}
	}

    protected function replaceForm($event_ret, $start_html, $form) {

        $ret = ($form instanceof InputfieldForm) ? $form->render() : $form;
        $html = $this->str_lreplace($start_html, '</form>' . $ret, $event_ret);

        return $html;
    }

    protected function getForm($formid) {

        $modules = wire('modules');

        $form = $modules->get("InputfieldForm");
        $form->action = './';
        $form->method = 'post';
        $form->attr('id+name', $formid);

        return $form;
    }

    /*
     *  render a login form
     */
    public function render($options = array()) {

        $modules = wire('modules');
        $defaultOptions = array(
            'formClass' => '',
            'buttonClass' => '',
            'buttonValue' => '',
            'prependMarkup' => '',
            'appendMarkup' => ''
        );
        $options = array_merge($defaultOptions, $options);
        $form = $this->getForm('socialsLoginForm');
        $form->prependMarkup = $options['prependMarkup'];
        $form->appendMarkup = $options['prependMarkup'];
        $out = '';

        foreach ($this->data as $key => $val) {
            if(strstr($key, 'provider_') && $val === 1) {
                $provider = str_replace('provider_', '', $key);
                $provider = ucfirst($provider);
                $config = self::getProviderConfig($provider);
                if($config != null && self::checkProviderClass(self::getProviderClassName($provider,$config)) ) {
                    $field = $modules->get("InputfieldSubmit");
                    if(strstr($options['buttonValue'], '{provider}')) {
                        $field->value = str_replace('{provider}', $provider, $options['buttonValue']);
                    }
                    else {
                        $field->value = empty($options['buttonValue']) ? __("Login with ") . $provider : $options['buttonValue'];
                    }
                    //$field->icon = "{$provider}";
                    $field->attr('id+name', strtolower("provider_{$provider}"));
                    if(!empty($options['buttonClass'])) $field->attr('class', $options['buttonClass']);
                    $form->append($field);
                }
            }
        }

        if ($form->count() ===1){
            $form->style = 'margin:0 auto; ';
        }

        $out .= $form->render();

        return $out;
    }

    /**
     * Checks username and emails
     * @param string $username Assumed username
     * @param array $emails User emails to compare
     * @return \ProcessWire\User|null User if found, null if not
     */
    protected function checkUsername($username, array $emails):?\ProcessWire\User {
        // disable DoS
        if(count($emails) > 10) return null;

        $username = wire('sanitizer')->pageName($username);

        foreach ($emails as $email) {
            $email = wire('sanitizer')->email($email);
            $q = "email=$email, name=$username";
            $user = wire('users')->get("{$q}");
            if($user->id) {
                //bd("logged with user: $username, email: $email");
                return $user;
            }
        }

        return null;
    }

    protected function registerNewUser($ownerDetails,string $username, array $emails):?\ProcessWire\User
    {
        $providerName = $this->getProviderName();
        if (empty($providerName))
            throw new \ProcessWire\WireException('Could not get a provider name!');

        $provider = str_replace('provider_','',$providerName);
        
        
        $config = self::getProviderConfig(str_replace('provider_','',$providerName));
        if ($config == null)
            throw new \ProcessWire\WireException(sprintf('Could not get config for provider %s',$providerName));

        if (! $this->get($provider.'_registerifnotfound'))
            return null;
        $roleId = $this->get($provider.'_registerrole');
        if (empty($roleId))
            throw new \ProcessWire\WireException(sprintf($this->_('No registration default role defined for provider %s. Ensure that valid role is set in configuration.'), lcfirst($provider)));
        $role = $this->roles->get(intval($roleId));
        if (! $role->id)
            throw new \ProcessWire\WireException(sprintf($this->_('There is no role registered with ID %s. Ensure that valid role is set in profile %s configuration.'), $roleId, lcfirst($provider)));

        // Role found. Generate!
        // Get first valid email:
        $email = null;
        foreach ($emails as $e)
        {
            $email = $this->sanitizer->email($e);
        }
        if (empty($email)){
            $this->warning($this->_('Your login did not produce any valid email address! So cannot register.'));
            return null;
        }
        //TODO: Some claims validation maybe?
        $user = $this->users->add($username);
        $user->of(false);
        $user->addRole($role);
        $user->email = $email;
        if (method_exists($ownerDetails,'getId'))
            $user->oauth_uid = $ownerDetails->getId();
        //$user->setLanguage($lang);
        $user->save();
        $user->of(true);

        $this->message($this->_('Your account successfully added!'));
        $this->log(sprintf('User %s registered via %s provider.',$user->email, $provider),['name'=>'Audits','user'=>$user]);
        return $user;
    }

    protected function getProviderName() {
        $providerName = null;

        foreach (wire('input')->post as $item => $value) {
            if($r = strstr($item, 'provider_')) {
                $providerName = $r;
            }
        }

        if(is_null($providerName)) {
            $providerName = wire('session')->get('providerName');
        }

        return $providerName;
    }

    protected function setProvider($providerName, $options = array()) {

        if(is_null($providerName)) {
            return false;
        }

        $redirectUri = empty(wire('session')->getFor($this, 'redirect_uri')) ? $this->backendUrl : wire('session')->getFor($this, 'redirect_uri');
        $subclass = ucfirst(str_replace('provider_', '', $providerName));
        $providerOptions = self::getProviderConfig($subclass);
        if ($providerOptions == null) return false;
        $class = self::getProviderClassName($subclass,$providerOptions);
        $subclass = strtolower($subclass);
        $varClientId = $subclass . '_clientid';
        $varSecret = $subclass . '_secret';
        $tenantId = isset($this->data[$subclass .'_tenantid']) ? $this->data[$subclass .'_tenantid']: '';

        if(!isset($this->data[$varClientId]) || !isset($this->data[$varSecret]))
            return false;
        
        $params = array(
            'clientId'      => $this->data[$varClientId],
            'clientSecret'  => $this->data[$varSecret],
            'redirectUri'   => $redirectUri
        );

        if (!empty($tenantId))
            $params['tenant'] = urlencode($tenantId);
        /** @var \Accss\FieldtypeSecret $secretMod */
        if ($secretMod = $this->modules->get('FieldtypeSecret'))
            $params['clientSecret'] = $secretMod::decryptValueWithIV($params['clientSecret']);
        
        $params = array_merge($params, $options);
        foreach ($this->data as $key => $value) {
            $r = strstr($key, 'provider_options_' . $subclass);
            if(!empty($r)) {
                $newOption = str_replace('provider_options_' . $subclass . '_', '', $key);
                $params = array_merge($params, array($newOption => $value));
            }
        }
        // EJ: Append providerOptions['options']
        if (isset($providerOptions['options']))
            $params = array_merge($params, $providerOptions['options']);
        $this->providerParams = $params;
        if(!self::checkProviderClass($class)) {
            return false;
        }
        $this->provider = new $class($params);
        wire('session')->set('providerName', $providerName);

        return (is_null($this->provider)) ? false : true;
    }

    protected static function checkProviderClass($class) {

        return class_exists($class);
    }

    public function setRedirectUri($uri) {
        wire('session')->setFor($this, 'redirect_uri', wire('sanitizer')->url($uri));
    }

    public function setRedirectSuccessUri($uri) {
        wire('session')->setFor($this, 'success_uri', wire('sanitizer')->url($uri));
    }

    public function config($options = array()) {

        $session = wire('session');
        $defaultOptions = array(
            'redirect_uri'  => $this->backendUrl,
            'success_uri'   => ''
        );
        $options = array_merge($defaultOptions, $options);

        foreach ($options as $k => $v) {
            $session->setFor($this, $k, $v);
        }
        return $this;
    }

    protected static function getProvidersJsonConfigAsArray() {
        if (is_null(self::$_data) || is_null(self::$_data['providers_config']))
            return false;
        $configArray = json_decode(self::$_data['providers_config'], true);
        if(empty($configArray)) {
            wire()->warning('Provider configuration is not a valid JSON');
            return false;
        }
        $fullarray = array();

        foreach ($configArray as $key) {
            foreach ($key as $k => $v) {
                $fullarray[$k] = $v;
            }
        }

        return $fullarray;
    }

    protected static function getProviderConfig(string $className):?array
    {
        $configs = self::getProvidersJsonConfigAsArray();
        if (!$configs) return null;

        $config = array_filter($configs, function($c) use ($className)
        {
            return strcasecmp($c['className'],$className) == 0;
        });
        if (count($config) >0)
        {
            return array_shift($config);
        }
        return null;
    }
    protected static function getProvidersConfig(array $providerConfig) {

        $fullarray = array();

        foreach ($providerConfig as $k => $v) {
            $fullarray[$k] = $v;
        }

        return $fullarray;
    }

    protected static function getProviderClassName(string $provider, array $options):string
    {
        return isset($options['providerClassName']) ? $options['providerClassName']
            : '\League\OAuth2\Client\Provider\\' . ucfirst($provider);
    }

    private static function getSecretField(){
        $modules = wire('modules');
        if ($modules->isInstalled('InputfieldSecret')){
            $s = $modules->get('InputfieldSecret');
            $s->handleInline = true;
            return $s;
        }

        return $modules->get('InputfieldText');
    }
    public static function getModuleConfigInputfields(array $data) {

        $data = array_merge(self::getDefaultData(), $data);
        $modules = wire('modules');
        $skip = false;
        $disabled = 'disabled';

        $fields = new InputfieldWrapper();

        $field = $modules->get("InputfieldTextarea");
        $field->label = __('JSON Providers Config ');
        $field->description = __("When adding a new provider, required config keys are: **providerClassName** (optional), **className**, **packageName**, **helpUrl**, **options** (optional)");
        $field->attr('name+id', 'providers_config');
        $field->attr('value', $data['providers_config']);
        $fields->append($field);

        // get all the providers config
        $providersArray = self::getProvidersJsonConfigAsArray();
        if(empty($providersArray)) {
            return $fields;
        }

        $fs = $modules->get("InputfieldFieldset");
        $fs->label = __("Providers");
        $fs->icon = 'cogs';
        $fs->description = __("Choose one or more of the following third-party login provider.");
        $fs->collapsed = false;
        foreach ($providersArray as $provider => $providerConf) {
            // get a provider configuration
            $data_key = '';
            $conf = self::getProvidersConfig($providerConf);

            $field = $modules->get("InputfieldCheckbox");
            if(!self::checkProviderClass(self::getProviderClassName($provider,$conf))) {
                $skip = true;
            }
            $description = ($skip == false) ? $disabled = '' : __("The required package is not installed. Please run the following command to install this provider: **composer require {$conf['packageName']}**");
            $field->label = ucfirst($provider);
            $field->description = __($description);
            $field->attr('name+id', "provider_" . strtolower($conf['className']));
            if (!$skip) {
                $data_key = isset($data["provider_" . strtolower($conf['className'])]) ? $data["provider_" . strtolower($conf['className'])] : '';
                $field->attr('checked', ($data_key == '1' && empty($disabled)) ? 'checked' : '');
                //$field->attr('checked', ($data["provider_" . strtolower($conf['className'])] == '1' && empty($disabled)) ? 'checked' : '');
                //$field->attr('data-icon', (empty($conf['image'])) ? '' : $config->urls->Oauth2Login . 'assets/' . $conf['image']);
            }
            $field->attr('disabled', $disabled);
            $fs->append($field);
            $fs_set = $modules->get("InputfieldFieldset");
            $fs_set->label = ucfirst($conf['className']) . __(" Settings");
            $fs_set->icon = strtolower($conf['className']);
            $fs_set->collapsed = true;
            $fs_set->showIf = "provider_" . strtolower($conf['className']) . "=1";

            $field = $modules->get("InputfieldText");
            $field->label = ucfirst($conf['className']) . __(" Tenant ID");
            $field->description = __("Can be obtained [here]({$conf['helpUrl']}).");
            $field->attr('name+id', strtolower($conf['className']) . '_tenantid');
            $data_key = isset($data[strtolower($conf['className'] . "_tenantid")]) ? $data[strtolower($conf['className']) . "_tenantid"] : '';
            $field->attr('value', $data_key);
            $field->columnWidth = 50;
            $fs_set->append($field);

            $field = $modules->get("InputfieldText");
            $field->label = ucfirst($conf['className']) . __(" ClientID");
            $field->description = __("Can be obtained [here]({$conf['helpUrl']}).");
            $field->attr('name+id', strtolower(strtolower($conf['className']) . '_clientid'));
            $data_key = isset($data[strtolower($conf['className']) . "_clientid"]) ? $data[strtolower($conf['className']) . "_clientid"] : '';
            $field->attr('value', $data_key);
            $field->columnWidth = 50;
            $fs_set->append($field);

            $field = self::getSecretField(); //$modules->get("InputfieldText");
            $field->label = __("Client Secret");
            $field->description = __("Client Secret for your website.");
            $field->attr('name+id', strtolower($conf['className'] . "_secret"));
            $data_key = isset($data[strtolower($conf['className']) . "_secret"]) ? $data[strtolower($conf['className']) . "_secret"] : '';
            //if (get_class($field) == 'Accss\\InputfieldSecret')
            //    $field->setSecret($data_key);
            //else
                $field->attr('value', $data_key);
            $field->columnWidth = 50;
            $fs_set->append($field);

            if ($provider == 'microsoft' || $provider =='azure')
            {
                $iVal = strtolower($conf['className'].'_use_mfa');
                $field = $modules->get("InputfieldCheckbox");
                $field->label = __('Require MFA?');
                $field->description = __('If company policy requires use of MFA (or login fails with AADSTS50076 error), check this');
                $field->attr('name+id', $iVal);
                $field->checked = !empty($data[$iVal]);
                $fs_set->append($field);
            }

            if(isset($conf['options'])) {
                foreach ($conf['options'] as $key => $value) {
                    $field = $modules->get("InputfieldHidden");
                    $field->attr('name+id', 'provider_options_' . strtolower($provider) . '_' . $key);
                    $field->attr('value', $value);
                    $fs_set->append($field);
                }
            }
            $fs->append($fs_set);

            $f = $modules->get('InputfieldCheckbox');
            $iVal = strtolower($conf['className'] .'_registerIfNotFound');
            $f->label = __('Register user if not found?');
            $f->description = __('If enabled, site will register not found users. Use this with caution because you may allow undefined users to administer your site!');
            $f->attr('name+id',$iVal);
            $f->checked = !empty($data[$iVal]);
            $fs_set->append($f);

            $f = $modules->get('InputfieldSelect');
            $iVal = strtolower($conf['className'] .'_registerRole');
            $f->label = __('Role to register user on');
            $f->showIf = sprintf('%s=1',strtolower($conf['className'] .'_registerIfNotFound'));
            $f->required = true;//If = sprintf('%s=1',strtolower($conf['className'] .'_registerIfNotFound'));
            $f->attr('name+id',$iVal);
            foreach (wire('roles') as $role)
            {
                $f->addOption($role->id,$role->name);
            }
            $f->value = !empty($data[$iVal])? $data[$iVal]:'';
            $fs_set->append($f);


            $disabled = true;
            $skip = false;
        }
        $fields->append($fs);

        return $fields;
    }

}



